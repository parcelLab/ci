name: Reusable matrix image build workflow with ECR or GitHub Registry

jobs:
  github:
    if: $REPOSITORY_KIND == 'github'
    environment: $GITHUB_PAYLOAD_ENVIRONMENT
    runs-on: $RUNNER
    strategy:
      matrix:
        containerfile_targets: ${{ fromJson(inputs.imageTargets) }}
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: $REGISTRY_HOSTNAME
          username: $REGISTRY_USERNAME
          password: $REPO_ACCESS_TOKEN
      - name: Build ${{ matrix.containerfile_targets }} image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            GITHUB_SHA=$GITHUB_SHA
            VERSION=$VERSION
            APP_NAME=$GITHUB_PAYLOAD_NAME
            ENVIRONMENT=$GITHUB_PAYLOAD_ENVIRONMENT
            NPM_GITHUB_TOKEN=$NPM_GITHUB_READ_TOKEN
          cache-from: type=registry,ref=$REGISTRY_HOSTNAME/$REGISTRY_ORG/$GITHUB_PAYLOAD_NAME
          cache-to: type=inline
          context: $GITHUB_PAYLOAD_CONTEXT
          load: true
          file: $GITHUB_PAYLOAD_FILE
          platforms: linux/amd64
          tags: |
            $REGISTRY_HOSTNAME/$REGISTRY_ORG/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:latest
            $REGISTRY_HOSTNAME/$REGISTRY_ORG/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:$VERSION
            $REGISTRY_HOSTNAME/$REGISTRY_ORG/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:$GITHUB_SHA
          target: ${{ matrix.containerfile_targets }}
      - name: Scan for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: $REGISTRY_HOSTNAME/$REGISTRY_ORG/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:latest
          dockerfile: Containerfile
          severity: $IMAGE_SCAN_SEVERITY
          severity_threshold: $IMAGE_SCAN_SEVERITY_THRESHOLD
          annotations: $IMAGE_SCAN_ANNOTATIONS
        env:
          TRIVY_TIMEOUT: $IMAGE_SCAN_TRIVY_TIMEOUT
      - name: Push ${{ matrix.containerfile_targets }} image to ECR
        run: |
          docker push -a $REGISTRY_HOSTNAME/$REGISTRY_ORG/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}

  ecr:
    if: $REPOSITORY_KIND == 'ecr'
    environment: $GITHUB_PAYLOAD_ENVIRONMENT
    runs-on: $RUNNER
    strategy:
      matrix:
        containerfile_targets: ${{ fromJson(inputs.imageTargets) }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: $IMAGE_SCAN_TRIVY_TIMEOUT
          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
          aws-region: eu-central-1
      - name: Create ${{ matrix.containerfile_targets }} ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names $GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }} || \
          aws ecr create-repository --repository-name $GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}
          LIFECYCLE_POLICY='{"rules":[{"rulePriority":1,"description":"Keep last 500 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":500},"action":{"type":"expire"}}]}'
          aws ecr put-lifecycle-policy --repository-name $GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }} --lifecycle-policy-text "$LIFECYCLE_POLICY"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build ${{ matrix.containerfile_targets }} image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            GITHUB_SHA=$GITHUB_SHA
            VERSION=$VERSION
            APP_NAME=$GITHUB_PAYLOAD_NAME
            ENVIRONMENT=$GITHUB_PAYLOAD_ENVIRONMENT
            NPM_GITHUB_TOKEN=$NPM_GITHUB_READ_TOKEN
          cache-from: type=registry,ref=$REGISTRY_HOSTNAME/$REGISTRY_ORG/$GITHUB_PAYLOAD_NAME
          cache-to: type=inline
          context: $GITHUB_PAYLOAD_CONTEXT
          load: true
          file: $GITHUB_PAYLOAD_FILE
          platforms: linux/amd64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:latest
            ${{ steps.login-ecr.outputs.registry }}/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:$VERSION
            ${{ steps.login-ecr.outputs.registry }}/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:$GITHUB_SHA
          target: ${{ matrix.containerfile_targets }}
      - name: Scan for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}:latest
          dockerfile: Containerfile
          severity: $IMAGE_SCAN_SEVERITY
          severity_threshold: $IMAGE_SCAN_SEVERITY_THRESHOLD
          annotations: $IMAGE_SCAN_ANNOTATIONS
        env:
          TRIVY_TIMEOUT: $IMAGE_SCAN_TRIVY_TIMEOUT
      - name: Push ${{ matrix.containerfile_targets }} image to ECR
        run: |
          docker push -a ${{ steps.login-ecr.outputs.registry }}/$GITHUB_PAYLOAD_NAME-${{ matrix.containerfile_targets }}