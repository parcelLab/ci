name: Reusable single image build workflow with ECR or GitHub Registry

jobs:
  github:
    if: ${{ env.repository_kind }} == 'github'
    environment: ${{ env.GITHUB_PAYLOAD_ENVIRONMENT }}
    runs-on: ${{ env.runner }}
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registryHostname }}
          username: ${{ env.registryUsername }}
          password: ${{ env.repoAccessToken }}
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            GITHUB_SHA=${{ env.GITHUB_SHA }}
            VERSION=${{ env.VERSION }}
            APP_NAME=${{ env.GITHUB_PAYLOAD_NAME }}
            ENVIRONMENT=${{ env.GITHUB_PAYLOAD_ENVIRONMENT }}
            NPM_GITHUB_TOKEN=${{ env.npmGithubReadToken }}
          cache-from: type=registry,ref=${{ env.registryHostname }}/${{ env.registryOrg }}/${{ env.GITHUB_PAYLOAD_NAME }}
          cache-to: type=inline
          context: ${{ env.GITHUB_PAYLOAD_CONTEXT }}
          load: true
          file: ${{ GITHUB_PAYLOAD_FILE }}
          platforms: linux/amd64
          tags: |
            ${{ env.registryHostname }}/${{ env.registryOrg }}/${{ env.GITHUB_PAYLOAD_NAME }}:latest
            ${{ env.registryHostname }}/${{ env.registryOrg }}/${{ env.GITHUB_PAYLOAD_NAME }}:${{ env.VERSION }}
            ${{ env.registryHostname }}/${{ env.registryOrg }}/${{ env.GITHUB_PAYLOAD_NAME }}:${{ env.GITHUB_SHA }}
      - name: Scan for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.registryHostname }}/${{ env.registryOrg }}/${{ env.GITHUB_PAYLOAD_NAME }}:latest
          dockerfile: Containerfile
          severity: ${{ env.IMAGE_SCAN_SEVERITY }}
          severity_threshold: ${{ env.IMAGE_SCAN_SEVERITY_THRESHOLD }}
          annotations: ${{ env.IMAGE_SCAN_ANNOTATIONS }}
        env:
          TRIVY_TIMEOUT: ${{ env.IMAGE_SCAN_TRIVY_TIMEOUT }}
      - name: Push image to GitHub
        run: |
          docker push -a ${{ env.registryHostname }}/${{ env.registryOrg }}/${{ env.GITHUB_PAYLOAD_NAME }}

  ecr:
    if: ${{ env.repository_kind }} == 'ecr'
    environment: ${{ env.GITHUB_PAYLOAD_ENVIRONMENT }}
    runs-on: ${{ env.runner }}
    steps:
      - name: Configure AWS credentials
        if: ${{ env.repository_kind }} == 'ecr'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.GITHUB_PAYLOAD_NAME }} || \
          aws ecr create-repository --repository-name ${{ env.GITHUB_PAYLOAD_NAME }}
          LIFECYCLE_POLICY='{"rules":[{"rulePriority":1,"description":"Keep last 500 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":500},"action":{"type":"expire"}}]}'
          aws ecr put-lifecycle-policy --repository-name ${{ env.GITHUB_PAYLOAD_NAME }} --lifecycle-policy-text "$LIFECYCLE_POLICY"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            GITHUB_SHA=${{ env.GITHUB_SHA }}
            VERSION=${{ env.VERSION }}
            APP_NAME=${{ env.GITHUB_PAYLOAD_NAME }}
            ENVIRONMENT=${{ env.GITHUB_PAYLOAD_ENVIRONMENT }}
            NPM_GITHUB_TOKEN=${{ env.npmGithubReadToken }}
          cache-from: type=registry,ref=${{ env.registryHostname }}/${{ env.registryOrg }}/${{ env.GITHUB_PAYLOAD_NAME }}
          cache-to: type=inline
          context: ${{ env.GITHUB_PAYLOAD_CONTEXT }}
          load: true
          file: ${{ GITHUB_PAYLOAD_FILE }}
          platforms: linux/amd64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.GITHUB_PAYLOAD_NAME }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.GITHUB_PAYLOAD_NAME }}:${{ env.VERSION }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.GITHUB_PAYLOAD_NAME }}:${{ env.GITHUB_SHA }}
      - name: Scan for vulnerabilities
        if: ${{ env.repository_kind }} == 'ecr'
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.GITHUB_PAYLOAD_NAME }}:latest
          dockerfile: Containerfile
          severity: ${{ env.IMAGE_SCAN_SEVERITY }}
          severity_threshold: ${{ env.IMAGE_SCAN_SEVERITY_THRESHOLD }}
          annotations: ${{ env.IMAGE_SCAN_ANNOTATIONS }}
        env:
          TRIVY_TIMEOUT: ${{ env.IMAGE_SCAN_TRIVY_TIMEOUT }}
      - name: Push image to ECR
        if: ${{ env.repository_kind }} == 'ecr'
        run: |
          docker push -a ${{ steps.login-ecr.outputs.registry }}/${{ env.GITHUB_PAYLOAD_NAME }}