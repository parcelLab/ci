name: Reusable Container
on:
  workflow_call:
    inputs:
      appName:
        required: true
        description: The container image name
        type: string
      contextPath:
        required: false
        description: The container context to build the image
        default: .
        type: string
      extraBuildArgs:
        required: false
        description: Extra build arguments for building the docker image (KEY=VALUE separated by new lines)
        default: ""
        type: string
      filePath:
        required: false
        description: The file path for the Container image
        default: Containerfile
        type: string
      registryOrg:
        required: false
        description: The registry organization
        default: parcellab
        type: string
      runner:
        required: false
        description: Runner type
        default: ubuntu-latest
        type: string
      version:
        required: true
        description: The version to push
        type: string
    secrets:
      npmGithubReadToken:
        required: false
        description: The Github token with permissions to read NPM private packages
      registryPassword:
        required: true
        description: The password for the container registry
jobs:
  build-ecr-single:
    permissions:
      id-token: write
      contents: read
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ inputs.registryOrg }}/${{ inputs.appName }} || \
          aws ecr create-repository --repository-name ${{ inputs.registryOrg }}/${{ inputs.appName }}
          LIFECYCLE_POLICY='{"rules":[{"rulePriority":1,"description":"Keep last 500 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":500},"action":{"type":"expire"}}]}'
          aws ecr put-lifecycle-policy --repository-name ${{ inputs.registryOrg }}/${{ inputs.appName }} --lifecycle-policy-text "$LIFECYCLE_POLICY"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            GITHUB_SHA=${{ github.sha }}
            VERSION=${{ inputs.version }}
            NPM_GITHUB_TOKEN=${{ secrets.npmGithubReadToken }}
            ${{ inputs.extraBuildArgs }}
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ inputs.registryOrg }}/${{ inputs.appName }}:cache
          cache-to: mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{ steps.login-ecr.outputs.registry }}//${{ inputs.registryOrg }}/${{ inputs.appName }}:cache
          context: ${{ inputs.contextPath }}
          load: true
          file: ${{ inputs.filePath }}
          platforms: linux/amd64
      - name: Scan for vulnerabilities
        if: inputs.enableContainerScan
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.registryOrg }}/${{ inputs.appName }}:latest
          dockerfile: Containerfile
          severity: ${{ env.IMAGE_SCAN_SEVERITY }}
          severity_threshold: ${{ env.IMAGE_SCAN_SEVERITY_THRESHOLD }}
          annotations: ${{ env.IMAGE_SCAN_ANNOTATIONS }}
        env:
          TRIVY_TIMEOUT: ${{ env.IMAGE_SCAN_TRIVY_TIMEOUT }}
      - name: Push image to ECR
        run: |
          docker push -a ${{ steps.login-ecr.outputs.registry }}/${{ inputs.registryOrg }}/${{ inputs.appName }}
