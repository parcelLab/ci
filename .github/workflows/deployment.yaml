name: Reusable Deployment
on:
  workflow_call:
    inputs:
      author:
        required: true
        description: The author of the change that triggers the deployment
        type: string
      configurationFilepath:
        required: false
        description: The path to the application configuration file
        default: ./plconfig.yaml
        type: string
      description:
        required: true
        description: The description of the change (e.g. the commit title)
        type: string
      env:
        required: true
        description: The application environment. Can be test, staging or prod.
        type: string
      ref:
        required: false
        description: The github ref to deploy
        default: main
        type: string
      runner:
        required: false
        description: Runner type
        default: ubuntu-latest
        type: string
      statusUrl:
        required: false
        description: The url that shows the status of the application
        type: string
      url:
        required: false
        description: The url where the application is served
        type: string
    secrets:
      repoAccessToken:
        required: true
        description: The Github token to perform operations cross-repo (not secrets.GITHUB_TOKEN!)
jobs:
  read_schema_version:
    runs-on: ${{ inputs.runner }}
    outputs:
      version: ${{ steps.version.outputs.result }}
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Load schema version
        id: version
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq ".schemaVersion" ${{ inputs.configurationFilepath }}
  # Deprecated
  deployment_legacy:
    runs-on: ${{ inputs.runner }}
    needs: [read_schema_version]
    if: needs.read_schema_version.outputs.version != 'v2'
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Load plconfig deployment values
        id: deployment-yaml
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq -o json -I 0 '.deployment' ${{ inputs.configurationFilepath }}
      - name: Load k8s deployment variables
        id: k8s
        run: |
          # shellcheck disable=SC2129,SC2086
          echo "namespace=${{ fromJSON(steps.deployment-yaml.outputs.result).namespace }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "chart=${{ fromJSON(steps.deployment-yaml.outputs.result).chart }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "containerContextPath=${{ fromJSON(steps.deployment-yaml.outputs.result).container.contextPath || '.' }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "containerFile=${{ fromJSON(steps.deployment-yaml.outputs.result).container.file || 'Containerfile' }}" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.env }}" == 'prod' ]]
          then
            URL="${{ fromJSON(steps.deployment-yaml.outputs.result).urls.prod[0] }}"
            STATUS_URL="${{ fromJSON(steps.deployment-yaml.outputs.result).status_url.prod }}"
          elif [[ "${{ inputs.env }}" == 'staging' ]]
          then
            URL="${{ fromJSON(steps.deployment-yaml.outputs.result).urls.staging[0] }}"
            STATUS_URL="${{ fromJSON(steps.deployment-yaml.outputs.result).status_url.staging }}"
          else
            URL="${{ fromJSON(steps.deployment-yaml.outputs.result).urls.test[0] }}"
            STATUS_URL="${{ fromJSON(steps.deployment-yaml.outputs.result).status_url.test }}"
          fi
          # shellcheck disable=SC2086
          echo "url=$URL" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "status-url=$STATUS_URL" >> $GITHUB_OUTPUT
      - name: Create Github ${{ fromJSON(steps.deployment-yaml.outputs.result).name }} k8s deployment
        uses: chrnorm/deployment-action@v2
        with:
          auto-merge: false
          environment: ${{ inputs.env }}
          ref: ${{ inputs.ref }}
          required-contexts: ""
          payload: |
            {
              "author": ${{ toJSON(inputs.author) }},
              "chart": ${{ toJSON(steps.k8s.outputs.chart) }},
              "container": {
                "context": ${{ toJSON(steps.k8s.outputs.containerContextPath) }},
                "file": ${{ toJSON(steps.k8s.outputs.containerFile) }}
              },
              "description": ${{ toJSON(inputs.description) }},
              "env": ${{ toJSON(inputs.env) }},
              "name": ${{ toJSON(fromJSON(steps.deployment-yaml.outputs.result).name) }},
              "namespace": ${{ toJSON(steps.k8s.outputs.namespace) }},
              "statusUrl": ${{ toJSON(steps.k8s.outputs.status-url) }},
              "url": ${{ toJSON(steps.k8s.outputs.url) }}
            }
          production-environment: "${{ inputs.env == 'prod' }}"
          transient-environment: "${{ inputs.env == 'test' }}"
          token: ${{ secrets.repoAccessToken }}
  detect_declarations:
    runs-on: ${{ inputs.runner }}
    needs: [read_schema_version]
    if: needs.read_schema_version.outputs.version == 'v2'
    outputs:
      has-kubernetes: ${{ steps.has-kubernetes.outputs.result }}
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Detect kubernetes deployment
        id: has-kubernetes
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq '.deployment | has("kubernetes")' ${{ inputs.configurationFilepath }}
  kubernetes:
    runs-on: ${{ inputs.runner }}
    needs: [detect_declarations]
    if: needs.detect_declarations.outputs.has-kubernetes == 'true'
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Load plconfig values
        id: values
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq "." ${{ inputs.configurationFilepath }} -o=json -I=0
      - name: Load k8s deployment variables
        id: k8s
        run: |
          # shellcheck disable=SC2129,SC2086
          echo "namespace=${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.namespace }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "version-key=${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.versionKey }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "container-context=${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.container.context || '.' }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "container-file=${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.container.file || 'Containerfile' }}" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.env }}" == 'prod' ]]
          then
            URL="${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.env.prod.metadata.url }}"
            STATUS_URL="${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.env.prod.metadata.statusUrl }}"
          elif [[ "${{ inputs.env }}" == 'staging' ]]
          then
            URL="${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.env.staging.metadata.url }}"
            STATUS_URL="${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.env.staging.metadata.statusUrl }}"
          else
            URL="${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.env.test.metadata.url }}"
            STATUS_URL="${{ fromJSON(steps.values.outputs.result).deployment.kubernetes.env.prod.metadata.statusUrl }}"
          fi
          # shellcheck disable=SC2086
          echo "url=$URL" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "status-url=$STATUS_URL" >> $GITHUB_OUTPUT
      - name: Create Github ${{ fromJSON(steps.values.outputs.result).name }} k8s deployment
        uses: chrnorm/deployment-action@v2
        with:
          auto-merge: false
          environment: ${{ inputs.env }}
          ref: ${{ inputs.ref }}
          required-contexts: ""
          payload: |
            {
              "author": ${{ toJSON(inputs.author) }},
              "description": ${{ toJSON(inputs.description) }},
              "env": ${{ toJSON(inputs.env) }},
              "name": ${{ toJSON(fromJSON(steps.values.outputs.result).name) }},
              "container": {
                "context": ${{ toJSON(steps.k8s.outputs.container-context) }},
                "file": ${{ toJSON(steps.k8s.outputs.container-file) }}
              },
              "kubernetes": {
                "namespace": ${{ toJSON(steps.k8s.outputs.namespace) }},
                "versionKey": ${{ toJSON(steps.k8s.outputs.version-key) }}
              },
              "schemaVersion": "v2",
              "statusUrl": ${{ toJSON(steps.k8s.outputs.status-url) }},
              "url": ${{ toJSON(steps.k8s.outputs.url) }}
            }
          production-environment: "${{ inputs.env == 'prod' }}"
          transient-environment: "${{ inputs.env == 'test' }}"
          token: ${{ secrets.repoAccessToken }}
