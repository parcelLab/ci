name: Reusable parcelLab Config
on:
  workflow_call:
    inputs:
      botEmail:
        required: false
        description: The email of the bot that will appear in the GitOps commit
        default: dev.bot@parcellab.com
        type: string
      botName:
        required: false
        description: The name of the bot that will appear in the GitOps commit
        default: parcellab-dev-bot
        type: string
      configurationFilepath:
        required: false
        description: The path to the application configuration file
        default: ./plconfig.yaml
        type: string
      deploymentRepoPath:
        required: false
        description: The path within the deployment repository that holds all version files
        default: namespaces
        type: string
      deploymentRepoURL:
        required: false
        description: The repository within Github that holds the version file to deploy via GitOps
        default: parcelLab/deployment
        type: string
    secrets:
      repoAccessToken:
        required: true
        description: The Github token to perform operations cross-repo (not secrets.GITHUB_TOKEN!)
jobs:
  read_schema_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.result }}
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Load schema version
        id: version
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq ".schemaVersion" ${{ inputs.configurationFilepath }}
  plconfig_legacy:
    if: needs.read_schema_version.outputs.version != 'v2'
    runs-on: ubuntu-latest
    needs: [read_schema_version]
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Load name
        id: name
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq ".deployment.name" ${{ inputs.configurationFilepath }}
      - name: Load namespace
        id: namespace
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq ".deployment.namespace" ${{ inputs.configurationFilepath }}
      - name: Load chart
        id: chart
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq ".deployment.chart" ${{ inputs.configurationFilepath }}
      - name: Checkout ${{ inputs.deploymentRepoURL }} git repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.deploymentRepoURL }}
          path: remote
          token: ${{ secrets.repoAccessToken }}
          ref: main
      - name: Load vars
        id: vars
        run: |
          # shellcheck disable=SC2086
          echo "namespace-path=remote/${{ inputs.deploymentRepoPath }}/${{ steps.namespace.outputs.result }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "do-not-edit=DO NOT EDIT. Auto generated from ${{ steps.name.outputs.result }} ${{ inputs.configurationFilepath }} (replaces values.yaml instead)" >> $GITHUB_OUTPUT
      # Load plconfig values scoping to a subchart
      - name: Load external values for all environments
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: >-
            $(yq '.deployment.values | has("dev")' ${{ inputs.configurationFilepath }}) == 'true' && yq '{ "${{ steps.chart.outputs.result }}": .deployment.values.dev } | . head_comment="${{ steps.vars.outputs.do-not-edit }}"' ${{ inputs.configurationFilepath }} > ${{ steps.vars.outputs.namespace-path }}/dev/${{ steps.name.outputs.result }}/values-external.yaml ||
            $(yq '.deployment.values | has("prod")' ${{ inputs.configurationFilepath }}) == 'true' && yq '{ "${{ steps.chart.outputs.result }}": .deployment.values.prod } | . head_comment="${{ steps.vars.outputs.do-not-edit }}"' ${{ inputs.configurationFilepath }} > ${{ steps.vars.outputs.namespace-path }}/prod/${{ steps.name.outputs.result }}/values-external.yaml ||
            $(yq '.deployment.values | has("staging")' ${{ inputs.configurationFilepath }}) == 'true' && yq '{ "${{ steps.chart.outputs.result }}": .deployment.values.staging } | . head_comment="${{ steps.vars.outputs.do-not-edit }}"' ${{ inputs.configurationFilepath }} > ${{ steps.vars.outputs.namespace-path }}/staging/${{ steps.name.outputs.result }}/values-external.yaml ||
            $(yq '.deployment.values | has("test")' ${{ inputs.configurationFilepath }}) == 'true' && yq '{ "${{ steps.chart.outputs.result }}": .deployment.values.test } | . head_comment="${{ steps.vars.outputs.do-not-edit }}"' ${{ inputs.configurationFilepath }} > ${{ steps.vars.outputs.namespace-path }}/test/${{ steps.name.outputs.result }}/values-external.yaml || true
      # Commit & Push
      - name: Commit deployment files
        run: |
          cd remote
          git config --global user.email "${{ inputs.botEmail }}"
          git config --global user.name "${{ inputs.botName }}"
          git add .
          git commit --allow-empty -m "chore(${{ steps.name.outputs.result }}): set parcelLab config values"
      - name: Push changes to main in ${{ inputs.deploymentRepoURL }} git repository
        uses: ad-m/github-push-action@0fafdd62b84042d49ec0cb92d9cac7f7ce4ec79e
        with:
          repository: ${{ inputs.deploymentRepoURL }}
          directory: remote
          github_token: ${{ secrets.repoAccessToken }}
          branch: main
          force: true
  detect_declarations:
    if: needs.read_schema_version.outputs.version == 'v2'
    runs-on: ubuntu-latest
    needs: [read_schema_version]
    outputs:
      has-kubernetes: ${{ steps.has-kubernetes.outputs.result }}
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Detect kubernetes deployment
        id: has-kubernetes
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq '.deployment | has("kubernetes")' ${{ inputs.configurationFilepath }}
  kubernetes_matrix:
    if: needs.detect_declarations.outputs.has-kubernetes == 'true'
    runs-on: ubuntu-latest
    needs: [detect_declarations]
    outputs:
      matrix: ${{ steps.envs.outputs.result }}
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Detect envs
        id: envs
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq '.deployment.kubernetes.env | keys' ${{ inputs.configurationFilepath }} -o=json -I=0
  kubernetes_env:
    runs-on: ubuntu-latest
    needs: [kubernetes_matrix]
    strategy:
      matrix:
        env: ${{ fromJSON(needs.kubernetes_matrix.outputs.matrix) }}
      max-parallel: 1
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Checkout ${{ inputs.deploymentRepoURL }} git repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.deploymentRepoURL }}
          path: remote
          token: ${{ secrets.repoAccessToken }}
          ref: main
      - name: Load YAML values from file into JSON
        id: json
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: yq "." ${{ inputs.configurationFilepath }} -o=json -I=0
      - name: Load common vars
        id: vars
        run: |
          # shellcheck disable=SC2086
          echo "namespace-path=remote/${{ inputs.deploymentRepoPath }}/${{ fromJSON(steps.json.outputs.result).deployment.kubernetes.namespace }}" >> $GITHUB_OUTPUT
          # shellcheck disable=SC2086
          echo "do-not-edit=DO NOT EDIT. Auto generated from ${{ fromJSON(steps.json.outputs.result).name }} ${{ inputs.configurationFilepath }} (replaces values.yaml instead)" >> $GITHUB_OUTPUT
      - name: Load external values for ${{ matrix.env }}
        uses: mikefarah/yq@v4.30.8
        with:
          cmd: >-
            yq '.deployment.kubernetes.env.${{ matrix.env }}.values | . head_comment="${{ steps.vars.outputs.do-not-edit }}"' ${{ inputs.configurationFilepath }} > ${{ steps.vars.outputs.namespace-path }}/${{ matrix.env }}/${{ fromJSON(steps.json.outputs.result).name }}/values-external.yaml &&
            yq '{ "dependencies": .deployment.kubernetes.env.${{ matrix.env }}.dependencies } * {"apiVersion": "v2", "name": "${{ fromJSON(steps.json.outputs.result).name }}", "description": "${{ fromJSON(steps.json.outputs.result).description }} (${{ matrix.env }})", "version": "0.0.0"}' ${{ inputs.configurationFilepath }} > ${{ steps.vars.outputs.namespace-path }}/${{ matrix.env }}/${{ fromJSON(steps.json.outputs.result).name }}/Chart.yaml
      # Commit & Push to GitOps repo
      - name: Commit deployment files for ${{ matrix.env }}
        id: commit
        run: |
          cd remote
          if [[ $(git status --porcelain --untracked-files=no | wc -l) -gt 0 ]]; then
            # Untracked changes
            git config --global user.email "${{ inputs.botEmail }}"
            git config --global user.name "${{ inputs.botName }}"
            git add .
            git commit --allow-empty -m "chore(${{ fromJSON(steps.json.outputs.result).name }}): set parcelLab ${{ matrix.env }} config values"
            # shellcheck disable=SC2086
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            # No changes, ignore
            # shellcheck disable=SC2086
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi
      - if: steps.commit.outputs.has-changes == 'true'
        name: Push changes to main in ${{ inputs.deploymentRepoURL }} git repository for ${{ matrix.env }}
        uses: ad-m/github-push-action@0fafdd62b84042d49ec0cb92d9cac7f7ce4ec79e
        with:
          repository: ${{ inputs.deploymentRepoURL }}
          directory: remote
          github_token: ${{ secrets.repoAccessToken }}
          branch: main
          force: true
