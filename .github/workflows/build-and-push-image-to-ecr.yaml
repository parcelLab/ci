name: Build and push image from the PR to ECR

on:
  workflow_call:
    inputs:
      APPLICATION_NAME:
        description: The name of the application
        required: true
        type: string
      PR_NUMBER:
        description: Number of the current PR
        required: true
        type: number
      GHA_TRIGGER_EVENT:
        description: GitHub PR event that triggered the workflow
        required: true
        type: string
      artifactName:
        required: false
        description: If provided, downloads a previously uploaded artifact (has to be in the same workflow). Both artifactPath and artifactName have to be passed.
        default: ""
        type: string
      artifactPath:
        required: false
        description: If provided, downloads a previously uploaded artifact (has to be in the same workflow). Both artifactPath and artifactName have to be passed.
        default: ""
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-push-image-to-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current git repository
        uses: actions/checkout@v3
      - name: Download build artifact
        if: inputs.artifactPath != '' && inputs.artifactName != ''
        uses: actions/download-artifact@v4
        with:
          path: ${{ inputs.artifactPath }}
          name: ${{ inputs.artifactName }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ inputs.APPLICATION_NAME }} || \
          aws ecr create-repository --repository-name ${{ inputs.APPLICATION_NAME }}
          LIFECYCLE_POLICY='{"rules":[{"rulePriority":1,"description":"Keep last 500 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":500},"action":{"type":"expire"}}]}'
          aws ecr put-lifecycle-policy --repository-name ${{ inputs.APPLICATION_NAME }} --lifecycle-policy-text "$LIFECYCLE_POLICY"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push to repository
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Containerfile
          platforms: linux/amd64
          provenance: false
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.APPLICATION_NAME }}:preview
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.APPLICATION_NAME }}:${{ github.event.pull_request.head.sha }}
  comment-pr:
    if: ${{ inputs.GHA_TRIGGER_EVENT != 'synchronize' }}
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Preview URL: https://${{ inputs.APPLICATION_NAME }}-preview-${{ inputs.PR_NUMBER }}.staging.parcellab.dev
            Preview Argo App: https://argocd.staging.parcellab.dev/applications/argocd/${{ inputs.APPLICATION_NAME }}-preview-${{ inputs.PR_NUMBER }}
